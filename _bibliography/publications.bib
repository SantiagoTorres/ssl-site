---
---
References
==========

@book{ruby,
  title     = {The Ruby Programming Language},
  author    = {Flanagan, David and Matsumoto, Yukihiro},
  year      = {2008},
  publisher = {O'Reilly Media},
  link      = {http://isis.poly.edu/~jcappos/papers/torres_toto_usenixsec-2016.pdf},
  abstract  = {This is a paper about various things and stuff}
}

@inproceedings{Peddinti:2014:INK:2660460.2660467,
 author = {Peddinti, Sai Teja and Ross, Keith W. and Cappos, Justin},
 title = {"On the Internet, Nobody Knows You're a Dog:" A Twitter Case Study of Anonymity in Social Networks},
 booktitle = {Proceedings of the Second ACM Conference on Online Social Networks},
 series = {COSN '14},
 year = {2014},
 isbn = {978-1-4503-3198-2},
 location = {Dublin, Ireland},
 pages = {83--94},
 numpages = {12},
 link = {http://doi.acm.org/10.1145/2660460.2660467},
 doi = {10.1145/2660460.2660467},
 acmid = {2660467},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {anonymity, behavioral analysis, online social networks, quantify, twitter},
 abstract  = {Twitter does not impose a Real-Name policy for usernames, giving users the freedom to choose how they want to be identified. This results in some users being Identifiable (disclosing their full name) and some being Anonymous (disclosing neither their first nor last name).

In this work we perform a large-scale analysis of Twitter to study the prevalence and behavior of Anonymous and Identifiable users. We employ Amazon Mechanical Turk (AMT) to classify Twitter users as Highly Identifiable, Identifiable, Partially Anonymous, and Anonymous. We find that a significant fraction of accounts are Anonymous or Partially Anonymous, demonstrating the importance of Anonymity in Twitter. We then select several broad topic categories that are widely considered sensitive--including pornography, escort services, sexual orientation, religious and racial hatred, online drugs, and guns--and find that there is a correlation between content sensitivity and a user's choice to be anonymous. Finally, we find that Anonymous users are generally less inhibited to be active participants, as they tweet more, lurk less, follow more accounts, and are more willing to expose their activity to the general public. To our knowledge, this is the first paper to conduct a large-scale data-driven analysis of user anonymity in online social networks.}
}

@inproceedings {179745,
author = {Yanyan Zhuang and Eleni Gessiou and Steven Portzer and Fraida Fund and Monzur Muhammad and Ivan Beschastnikh and Justin Cappos},
title = {NetCheck: Network Diagnoses from Blackbox Traces},
booktitle = {11th USENIX Symposium on Networked Systems Design and Implementation (NSDI 14)},
year = {2014},
isbn = {978-1-931971-09-6},
address = {Seattle, WA},
pages = {115--128},
link = {https://www.usenix.org/conference/nsdi14/technical-sessions/presentation/zhuang},
publisher = {USENIX Association},
abstract  = {This paper introduces NetCheck, a tool designed to diagnose network problems in large and complex applications. NetCheck relies on blackbox tracing mechanisms, such as strace, to automatically collect sequences of network system call invocations generated by the application hosts. NetCheck performs its diagnosis by (1) totally ordering the distributed set of input traces, and by (2) utilizing a network model to identify points in the totally ordered execution where the traces deviated from expected network semantics.

Our evaluation demonstrates that NetCheck is able to diagnose failures in popular and complex applications without relying on any application- or network-specific information. For instance, NetCheck correctly identified the existence of NAT devices, simultaneous network disconnection/ reconnection, and platform portability issues. In a more targeted evaluation, NetCheck correctly detects over 95% of the network problems we found from bug trackers of projects like Python, Apache, and Ruby. When applied to traces of faults reproduced in a live network, NetCheck identified the primary cause of the fault in 90% of the cases. Additionally, NetCheck is efficient and can process a GB-long trace in about 2 minutes.}
}

@techreport{cappos2014polypasswordhasher,
  title={PolyPasswordHasher: Protecting Passwords In The Event Of A Password File Disclosure},
  author={Cappos, Justin and Torres, Santiago},
  year={2014},
  institution={Technical report},
  link  =    {http://isis.poly.edu/~jcappos/papers/torres_toto_usenixsec-2016.pdf},
  abstract  = {Over the years, we have witnessed various password-hash database breaches that have affected small and large companies, with a diversity of users and budgets. The indus- try standard, salted hashing (and even key stretching), has proven to be insufficient protection against attackers who now have access to clusters of GPU-powered password crackers. Although there are various proposals for better securing password storage, most do not offer the same adoption model (software-only, server-side) as salted hashing, which may impede adoption. In this paper, we present PolyPasswordHasher, a software- only, server-side password storage mechanism that requires min- imal additional work for the server, but exponentially increases the attackerâ€™s effort. PolyPasswordHasher uses a threshold cryp- tosystem to interrelate stored password data so that passwords cannot be individually cracked. Our analysis shows that Poly- PasswordHasher is memory and storage efficient, hard to crack, and easy to implement. In many realistic scenarios, cracking a PolyPasswordHasher-enabled database would be infeasible even for an adversary with millions of computers.}
}

@inproceedings{Cappos:2014:TSM:2538862.2538939,
 author = {Cappos, Justin and Weiss, Richard},
 title = {Teaching the Security Mindset with Reference Monitors},
 booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
 series = {SIGCSE '14},
 year = {2014},
 isbn = {978-1-4503-2605-6},
 location = {Atlanta, Georgia, USA},
 pages = {523--528},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/2538862.2538939},
 doi = {10.1145/2538862.2538939},
 acmid = {2538939},
 publisher = {ACM},
 address = {New York, NY, USA},
 link = {http://doi.acm.org/10.1145/2538862.2538939},
 keywords = {experience report, laboratory experience, privacy, security},
 abstract  = {One of the central skills in computer security is reasoning about how programs fail. As a result, computer security necessarily involves thinking about the corner cases that arise when software executes. An unfortunate side effect of this is that computer security assignments typically necessitate deep understanding of a topic, such as how the stack is laid out in memory or how web applications interact with databases. This work presents a series of assignments that require very little background knowledge from students, yet provide them with the ability to reason about failures in programs. In this set of assignments, students implement two very simple programs in a high-level language (Python). Students first implement a reference monitor that tries to uphold a security property within a sandbox. For the second portion, the students are provided each others' reference monitors and then write attack code to try to bypass the reference monitors. By leveraging a Python-based sandbox, student code is isolated cleanly, which simplifies development and grading. These assignments have been used in about a dozen classes in a range of environments, including a research university, online classes, and a four year liberal arts school. Student and instructor feedback has been overwhelmingly positive. Furthermore, survey results demonstrate that after a 2-3 week module, 76% of the students who did not understand reference monitors and access control learned these key security concepts.}
}

@INPROCEEDINGS{6601413,
author={Y. Zhuang and A. Rafetseder and J. Cappos},
booktitle={2013 Second GENI Research and Educational Experiment Workshop},
title={Experience with Seattle: A Community Platform for Research and Education},
year={2013},
pages={37-44},
keywords={computer aided instruction;research and development;security of data;teaching;Seattle testbed;application performance;computational resource;education platform;educational standpoint;research platform;teaching tool;user security;Communities;Educational institutions;Monitoring;Security;Smart phones;Software;Virtual machining;Distributed Testbed;Educational Use;End-User Machines;Experimental Facilities},
doi={10.1109/GREE.2013.16},
month={March},
link      = {http://dl.acm.org/citation.cfm?id=2538939},
abstract  = {Hands-on experience is a critical part of research and education. Today's distributed testbeds fulfill that need for many students studying networking, distributed systems, cloud computing, security, operating systems, and similar topics. In this work, we discuss one such testbed, Seattle. Seattle is an open research and educational testbed that utilizes computational resources provided by end users on their existing devices. Unlike most other platforms, resources are not dedicated to the platform which allows a greater degree of network diversity and realism at the cost of programmability. Seattle is designed to preserve user security and to minimally impact application performance. We describe the architectural design of Seattle, and summarize our experiences with Seattle over the past few years as both researchers and educators. We have found that Seattle is very easy to adopt due to cross-platform support, and is also surprisingly easy for students to use. While there are programmability limitations, it is possible to construct complex applications integrated with real devices, networks, and users with Seattle as a core component. From an educational standpoint, Seattle has been shown not only to be useful as a teaching tool, it has been successful in variety of different systems classes at a variety of different types of schools. In our experience, when low-level programmability is not the main requirement, Seattle can supersede many existing testbeds for diverse educational and research tasks}
}

@inbook{8b794dc889544496874eba0ffa5ad802,
title = "Avoiding theoretical optimality to efficiently and privately retrieve security updates",
keywords = "Performance, Practical Security, Private Information Retrieval",
author = "Justin Cappos",
year = "2013",
doi = "10.1007/978-3-642-39884-1_33",
isbn = "9783642398834",
volume = "7859 LNCS",
series = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
pages = "386--394",
booktitle = "Financial Cryptography and Data Security - 17th International Conference, FC 2013, Revised Selected Papers",
link      = {https://isis.poly.edu/~jcappos/papers/cappos_uppir_fc_13.pdf},
abstract  = {This work demonstrates the feasibility of building a PIR system
with performance similar to non-PIR systems in real situations. Prior
Chor PIR systems have chosen block sizes that are theoretically optimized
to minimize communication. This (ironically) reduces the throughput
of the resulting system by roughly 50x. We constructed a Chor PIR
system called upPIR that is efficient by choosing block sizes that are theoretically
suboptimal (from a communications standpoint), but fast and
efficient in practice. For example, an upPIR mirror running on a threeyear-old
desktop provides security updates from Ubuntu 10.04 (1.4 GB of
data) fast enough to saturate a T3 link. Measurements run using mirrors
distributed around the Internet demonstrate that a client can download
software updates with upPIR about as quickly as with FTP.}
}
@inproceedings{Cappos:2009:SPE:1508865.1508905,
 author = {Cappos, Justin and Beschastnikh, Ivan and Krishnamurthy, Arvind and Anderson, Tom},
 title = {Seattle: A Platform for Educational Cloud Computing},
 booktitle = {Proceedings of the 40th ACM Technical Symposium on Computer Science Education},
 series = {SIGCSE '09},
 year = {2009},
 isbn = {978-1-60558-183-5},
 location = {Chattanooga, TN, USA},
 pages = {111--115},
 numpages = {5},
 doi = {10.1145/1508865.1508905},
 acmid = {1508905},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {cloud computing, cluster computing, distributed computing, peer-to-peer computing},
 link      = {https://isis.poly.edu/~jcappos/papers/cappos_seattle_sigcse_2009.pdf},
 abstract  = {Cloud computing is rapidly increasing in popularity. Companies
such as RedHat, Microsoft, Amazon, Google, and
IBM are increasingly funding cloud computing infrastructure
and research, making it important for students to gain
the necessary skills to work with cloud-based resources. This
paper presents a free, educational research platform called
Seattle that is community-driven, a common denominator
for diverse platform types, and is broadly deployed.
Seattle is community-driven â€” universities donate available
compute resources on multi-user machines to the platform.
These donations can come from systems with a wide
variety of operating systems and architectures, removing the
need for a dedicated infrastructure.
Seattle is also surprisingly flexible and supports a variety
of pedagogical uses because as a platform it represents a
common denominator for cloud computing, grid computing,
peer-to-peer networking, distributed systems, and networking.
Seattle programs are portable. Studentsâ€™ code can run
across different operating systems and architectures without
change, while the Seattle programming language is expressive
enough for experimentation at a fine-grained level. Our
current deployment of Seattle consists of about one thousand
computers that are distributed around the world. We
invite the computer science education community to employ
Seattle in their courses.}

}
